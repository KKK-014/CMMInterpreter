program -> stmt-sequence 
stmt-sequence -> statement ; stmt-sequence | statement | Îµ 
statement -> if-stmt | while-stmt | assign-stmt | read-stmt | write-stmt | declare-stmt 
stmt-block -> statement | { stmt-sequence } 
if-stmt -> if ( exp ) then stmt-block | if ( exp ) then stmt-block else stmt-block 
while-stmt -> while ( exp ) stmt-block 
assign-stmt -> variable = exp ; 
read-stmt -> read variable ; 
write-stmt -> write exp ; 
declare-stmt -> (int | real) ( (identifier [= exp ]) | (identifier [ exp ]) ) ; 
variable -> identifier [ [ exp ] ] 
exp -> addtive-exp logical-op addtive-exp | addtive-exp 
addtive-exp -> term add-op additive-exp | term 
term -> factor mul-op term | factor 
factor -> ( exp ) | number | variable | Add-op exp 
logical-op -> > | < | >= | <= | <> | == 
add-op -> + | - 
mul-op -> * | /